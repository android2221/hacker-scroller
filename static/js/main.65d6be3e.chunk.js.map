{"version":3,"sources":["Scroller.js","App.js","reportWebVitals.js","index.js"],"names":["Scroller","trackScrolling","a","wrappedElement","document","getElementById","isBottom","state","loading","getData","topStories","storyData","currentStoriesSlice","displayData","currentOffset","storiesToLoad","mounted","this","addEventListener","removeEventListener","el","getBoundingClientRect","bottom","window","innerHeight","setState","startIndex","fetch","topStoriesResult","json","topStoriesJson","slice","Promise","all","map","x","storyResponse","story","kids","comment","result","topComments","storyDataArray","currentDataArray","push","newOffset","undefined","index","calculatedUrl","displayUrl","hnUrl","id","url","urlParts","split","className","href","title","score","by","descendants","unix","fromNow","time","dangerouslySetInnerHTML","__html","text","length","size","color","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.65d6be3e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Moment from 'react-moment';\nimport './Scroller.scss';\n\nclass Scroller extends Component {\n    constructor() {\n        super();\n        this.state = {\n            topStories: [],\n            storyData: [],\n            currentStoriesSlice: [],\n            displayData: [],\n            currentOffset: 10,\n            storiesToLoad: 10,\n            loading: true,\n        }\n        this.mounted = false;\n    }\n\n    async componentDidMount() {\n        this.mounted = true;\n        if (this.mounted){\n            await this.getData(); \n            document.addEventListener('scroll', this.trackScrolling);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('scroll', this.trackScrolling);\n    }\n\n    trackScrolling = async () => {\n        const wrappedElement = document.getElementById('bottom-element');\n        if (this.isBottom(wrappedElement)) {\n            if (!this.state.loading){\n                await this.getData();\n            }\n        }\n    };\n\n    isBottom(el) {\n        return el.getBoundingClientRect().bottom <= (window.innerHeight + 1);\n    }\n\n    async getData() {\n        this.setState({ loading: true });\n        var startIndex = this.state.currentOffset - this.state.storiesToLoad;\n\n        const topStoriesResult = await fetch(`https://hacker-news.firebaseio.com/v0/topstories.json`);\n        const topStoriesJson = await topStoriesResult.json();\n        const currentStoriesSlice = topStoriesJson.slice(startIndex, this.state.currentOffset);\n\n        var storyDataArray = await Promise.all(currentStoriesSlice.map(async (x) => {\n            var storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${x}.json`);\n            var story = await storyResponse.json();\n            if (story.kids) {\n                var topComments = await Promise.all(story.kids.slice(0, 10).map(async comment => {\n                    var result = await fetch(`https://hacker-news.firebaseio.com/v0/item/${comment}.json`);\n                    return await result.json();\n                }));\n            }\n\n            return { story: story, topComments: topComments }\n\n        }));\n\n        var currentDataArray = this.state.storyData;\n\n        currentDataArray.push(...storyDataArray);\n\n        var newOffset = this.state.currentOffset + this.state.storiesToLoad;\n\n        var displayData = [];\n\n        if (this.state.storyData !== undefined) {\n            displayData = this.state.storyData.map((x, index) => {\n                const story = x.story;\n                const topComments = x.topComments;\n\n                // Handle things that don't have a URL\n                // Go to hacker news if not\n\n                var calculatedUrl;\n                var displayUrl;\n                var hnUrl = `https://news.ycombinator.com/item?id=${story.id}`;\n\n                if (story.url) {\n                    var urlParts = story.url.split('/');\n                    calculatedUrl = story.url;\n                    displayUrl = urlParts[2];\n                } else {\n                    displayUrl = 'news.ycombinator.com';\n                    calculatedUrl = `https://news.ycombinator.com/item?id=${story.id}`;\n                }\n\n                return (\n                    <div className=\"hacker-card\" key={index}>\n                        <h2 className='story-title'>\n                            <a href={calculatedUrl}>\n                                {story.title}\n                            </a>\n                        </h2>\n                        <div className='story-url'>{displayUrl}</div>\n                        <div className='points-info'>\n                            {story.score} points by {story.by} | {story.descendants ? story.descendants : 0} comments | <Moment unix fromNow>{story.time}</Moment>\n                        </div>\n                        <div className='top-comments'>\n                            {topComments !== undefined ? <h3>Top Comments</h3> : ''}\n                            {topComments !== undefined ? topComments.map((comment, index) =>\n                                <div className=\"comment\" key={index}>\n                                    <div className=\"comment-by\">{comment.by} said:</div>\n                                    <div className=\"comment-text\" dangerouslySetInnerHTML={{ __html: comment.text }}></div>\n                                </div>\n                            ) : <div className=\"no-comments\">No comments yet</div>}\n                        </div>\n                        <div className=\"see-on-hn-overlay\">\n                            <div className=\"see-on-hn\">\n                                <a href={hnUrl}>Read on HN</a>\n                            </div>\n                        </div>\n                    </div>\n                )\n            });\n        }\n\n        this.setState({\n            topStories: topStoriesJson,\n            storyData: currentDataArray,\n            currentStoriesSlice: currentStoriesSlice,\n            currentOffset: newOffset,\n            displayData: displayData,\n            loading: false\n        });\n    }\n\n\n    render() {\n        if (this.state.displayData.length > 0) {\n            return (\n                <div className='scroller-container'>\n                    {this.state.displayData}\n                    <div id=\"bottom-element\"></div>\n                    <div id='loading-icon-container'>\n                        <div id='loading-icon' className=\"loading\">\n                            <ClipLoader size={35} color='black' loading={this.state.loading} />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div id='loading-icon' className='loading'>\n                <ClipLoader size={35} color='black' loading={this.state.loading} />\n            </div>\n        );\n    }\n}\n\nexport default Scroller;","import Scroller from './Scroller';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scroller></Scroller>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}