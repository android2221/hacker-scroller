{"version":3,"sources":["Slider.js","App.js","reportWebVitals.js","index.js"],"names":["SwiperCore","use","Virtual","Slider","state","topStories","storyData","currentStoriesSlice","displayData","currentOffset","storiesToLoad","loading","a","this","getData","swiper","activeIndex","setState","startIndex","fetch","topStoriesResult","json","topStoriesJson","slice","Promise","all","map","x","storyResponse","story","kids","comment","result","topComments","storyDataArray","currentDataArray","push","newOffset","calculatedUrl","displayUrl","hnUrl","id","url","urlParts","split","className","href","title","score","by","descendants","unix","fromNow","time","dangerouslySetInnerHTML","__html","text","update","length","spaceBetween","slidesPerView","onSlideChange","slideChange","direction","size","color","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.598f69c6.chunk.js","sourcesContent":["// Import Swiper React components\nimport SwiperCore, { Navigation, Pagination, Virtual } from 'swiper';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport React, { Component } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Moment from 'react-moment';\n\n// Import Swiper styles\nimport 'swiper/swiper.scss';\nimport './Slider.scss';\n\n// install Swiper modules\nSwiperCore.use([Virtual]);\n\nclass Slider extends Component {\n    constructor() {\n        super();\n        this.state = {\n            topStories: [],\n            storyData: [],\n            currentStoriesSlice: [],\n            displayData: [],\n            currentOffset: 10,\n            storiesToLoad: 10,\n            loading: true,\n        }\n    }\n\n    async componentDidMount() {\n        this.getData();\n    }\n\n    slideChange(swiper) {\n        var slideIndex = swiper.activeIndex;\n        if (slideIndex >= (this.state.currentOffset - this.state.storiesToLoad) - 2) {\n            this.getData(swiper);\n        }\n    }\n\n    async getData(swiper = null) {\n        this.setState({ loading: true });\n\n        var startIndex = this.state.currentOffset - this.state.storiesToLoad;\n\n        const topStoriesResult = await fetch(`https://hacker-news.firebaseio.com/v0/topstories.json`);\n        const topStoriesJson = await topStoriesResult.json();\n        const currentStoriesSlice = topStoriesJson.slice(startIndex, this.state.currentOffset);\n\n        var storyDataArray = await Promise.all(currentStoriesSlice.map(async (x) => {\n            var storyResponse = await fetch(`https://hacker-news.firebaseio.com/v0/item/${x}.json`);\n            var story = await storyResponse.json();\n\n            if (story.kids) {\n                var topComments = await Promise.all(story.kids.map(async comment => {\n                    var result = await fetch(`https://hacker-news.firebaseio.com/v0/item/${comment}.json`);\n                    return await result.json();\n                }));\n            }\n            \n            return {story: story, topComments: topComments}\n\n        }));\n\n        var currentDataArray = this.state.storyData;\n\n        currentDataArray.push(...storyDataArray);\n\n        var newOffset = this.state.currentOffset + this.state.storiesToLoad;\n\n        const displayData = this.state.storyData.map(x => {\n            const story = x.story;\n            const topComments = x.topComments;\n\n            // Handle things that don't have a URL\n            // Go to hacker news if not\n\n            var calculatedUrl;\n            var displayUrl;\n            var hnUrl = `https://news.ycombinator.com/item?id=${story.id}`;\n\n            if (story.url) {\n                var urlParts = story.url.split('/');\n                calculatedUrl = story.url;\n                displayUrl = urlParts[2];\n            } else {\n                displayUrl = 'news.ycombinator.com';\n                calculatedUrl = `https://news.ycombinator.com/item?id=${story.id}`;\n            }\n\n            return (\n                <SwiperSlide key={story.id} id={story.id}>\n                    <div className=\"hacker-card\">\n                        <div className='story-title'>\n                            <a href={calculatedUrl}>\n                                {story.title}\n                            </a>\n                        </div>\n                        <div className='story-url'>{displayUrl}</div>\n                        <div className='points-info'>\n                            {story.score} points by {story.by} | {story.descendants} comments | <Moment unix fromNow>{story.time}</Moment>\n                        </div>\n                        <div className='top-comments'>\n                            {topComments ? topComments.map(comment => \n                                <div className=\"comment\">{comment.by} said:\n                                    <div className=\"comment-text\" dangerouslySetInnerHTML={{__html: comment.text}}></div>\n                                </div>\n                                ) : 'no comments'}\n                        </div>\n                        <div className=\"see-on-hn-overlay\">\n                            <div className=\"see-on-hn\">\n                                <a href={hnUrl}>Read on HN</a>\n                            </div>\n                        </div>\n                    </div>\n                </SwiperSlide>\n            )\n        });\n\n        this.setState({\n            topStories: topStoriesJson,\n            storyData: currentDataArray,\n            currentStoriesSlice: currentStoriesSlice,\n            currentOffset: newOffset,\n            displayData: displayData,\n            loading: false\n        });\n\n        if (swiper != null){\n            swiper.update();\n        }\n    }\n\n    render() {\n        if (this.state.displayData.length > 0) {\n            return (\n                <div className='slider-container'>\n                    <Swiper\n                        spaceBetween={20}\n                        slidesPerView='auto'\n                        onSlideChange={(swiper) => this.slideChange(swiper)}\n                        direction='vertical'>\n                        {this.state.displayData}\n                    </Swiper>\n                    <div id='loading-icon' className='loading'>\n                        <ClipLoader size={35} color='black' loading={this.state.loading} />\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div id='loading-icon' className='loading'>\n                <ClipLoader size={35} color='black' loading={this.state.loading} />\n            </div>\n        );\n    }\n}\n\nexport default Slider;","import Slider from './Slider';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Slider></Slider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}